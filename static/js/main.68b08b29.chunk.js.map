{"version":3,"sources":["components/weathercard.js","components/weatherform.js","App.js","serviceWorker.js","index.js"],"names":["WeatherCard","props","className","style","border","city","color","country","weatherIcon","temp_celsius","min","max","Temp","temp_min","temp_max","description","Form","error","role","onSubmit","loadweather","type","name","placeholder","autoComplete","App","getWeather","e","a","preventDefault","target","elements","value","fetch","api_call","json","response","cod","state","checkPlace","indexOf","sys","console","log","setState","places","concat","Math","floor","main","temp","weather","icon","getIcon","id","undefined","celsius","ID","this","margin","map","place","idx","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.68b08b29.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n// Display all the information of a given place\r\nconst WeatherCard = (props) => {\r\n    return (\r\n        <div className = \"container\">\r\n            <div className = \"cards\" style={{border: props.city ? '2px solid white': 'transparent'}}>\r\n                <h1 style = {{color: 'white'}}>{props.city}</h1>\r\n                <h1 style = {{color: 'white'}}>{props.country}</h1>\r\n                <h5 className = \"py-4\">\r\n                    <i style = {{color: 'white'}} className = {`${props.weatherIcon} fa-4x`}></i>\r\n                </h5>\r\n\r\n                {props.temp_celsius ? <h1 style = {{color: 'white'}} className = \"py-2\">{props.temp_celsius}&deg;</h1>: null}\r\n                {Temp(props.temp_min, props.temp_max)}\r\n\r\n                <h4 className=\"py-3\" style = {{color: 'white'}}>{props.description}</h4>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n// Show the min and max temperature\r\nfunction Temp(min, max){\r\n    if(min && max){\r\n        return (\r\n            <h3 style = {{color: 'white'}}>\r\n                <span className = \"px-4\">\r\n                    {min}&deg;\r\n                </span>\r\n                <span className = \"px-4\">\r\n                    {max}&deg;\r\n                </span>\r\n            </h3>\r\n        );\r\n    }\r\n}\r\n\r\nexport default WeatherCard;","import React from 'react';\r\n\r\n\r\n// Calls props.loadweather which in turn calls the getWeather function\r\n// which finds the city/country and returns the weather details if it\r\n// is a valid city/country\r\n\r\nconst Form = props =>{\r\n    return(\r\n        <div className = \"container\">\r\n            <div>{props.error ? error(): null}</div>\r\n            <form onSubmit={props.loadweather}>\r\n                <div className = \"row\">\r\n                    <div className = \"col-md-3 offset-md-2\">\r\n                        <input type=\"text\" className = \"form-control\" name = \"city\"\r\n                        placeholder = \"Enter City\" autoComplete = \"off\" />\r\n                    </div>\r\n                    <div className = \"col-md-3\">\r\n                        <input type=\"text\" className = \"form-control\" name = \"country\"\r\n                         placeholder = \"Enter Country\" autoComplete = \"off\" />\r\n                    </div>\r\n                    <div className = \"col-md-3 mt-md 0 text-md-left\">\r\n                        <button className = \"btn btn-warning\">Add City</button>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\n// If no city and country is found...\r\nfunction error(){\r\n    return (\r\n        <div className = \"alert alert-danger mx-5\" role=\"alert\">\r\n            Please Enter Valid City and Country\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Form;","import React from 'react';\nimport './App.css';\nimport {Component} from 'react';\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport WeatherCard from './components/weathercard';\nimport Form from './components/weatherform';\n\n// Weather API key\nconst key = \"b215e5e049c4b3b9b050f1f3581e694e\";\n\nclass App extends Component{\n    constructor(){\n        super();\n\n        // Use an array of places to hold the places the user enters\n        // Used to display places in card list form\n        this.state = {\n            places: [{\n                city: undefined,\n                country: undefined,\n                icon: undefined,\n                main: undefined,\n                celsius: undefined,\n                temp_max: undefined,\n                temp_min: undefined,\n                description: \"\",\n                error: false\n            }],\n            checkPlace: []\n        };\n    }\n\n    // Uses OpenWeather API...\n    getWeather = async (e) =>{\n        e.preventDefault();\n\n        const city = e.target.elements.city.value;\n        const country = e.target.elements.country.value;\n\n        // If city and country isn't blank, we fetch the data\n        if(city && country){\n            const api_call = await fetch(\n            `https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${key}`\n            );\n\n            const response = await api_call.json();\n\n            if(response.cod !== 404 && this.state.checkPlace.indexOf(response.name + response.sys.country) === -1){\n                console.log(this.state.checkPlace);\n                this.setState({\n                    places: this.state.places.concat([{\n                        city: response.name,\n                        country: response.sys.country,\n                        temp_celsius: Math.floor(response.main.temp - 273.15),\n                        temp_max: Math.floor(response.main.temp_max - 273.15),\n                        temp_min: Math.floor(response.main.temp_min - 273.15),\n                        description: response.weather[0].description,\n                        icon: this.getIcon(response.weather[0].id)\n                    }]),\n                    checkPlace: this.state.checkPlace.concat(response.name + response.sys.country)\n                })\n                this.setState({\n                    error: false\n                })\n            }else{\n                // Display error message\n                this.setState({\n                    error: true\n                })\n            }\n        }else{\n\n            // Display error message\n            this.setState({\n                error: true\n            })\n        }\n\n    }\n\n    // Get the corresponding font awesome icon based on the ID\n    getIcon(ID){\n        if(ID >= 200 && ID <= 232){\n            return \"fa fa-bolt\";\n        }else if(ID >= 300 && ID <= 321){\n            return \"fas fa-cloud-rain\";\n        }else if(ID >= 500 && ID <= 531){\n             return \"fas fa-cloud-showers-heavy\";\n        }else if(ID >= 600 && ID <= 622){\n             return \"fa fa-snowflake\";\n        }else if(ID >= 701 && ID <= 622){\n              return \"fas fa-smog\";\n        }else if(ID === 800){\n              return \"fa fa-sun\";\n        }else if(ID >= 801 && ID <= 804){\n              return \"fa fa-cloud\";\n        }else{\n              return \"fa fa-sun\";\n        }\n    }\n\n    render(){\n        return (\n            <div className=\"App\">\n                <Form loadweather = {this.getWeather} error = {this.state.error}/>\n                <h1 style={{color: 'white', margin: '50px'}}>Weather Report</h1>\n                <div className=\"d-flex justify-content-center flex-wrap\">\n                    {this.state.places.map((place, idx) => (\n                        <a className=\"App-link\">\n                          <WeatherCard city = {place.city}\n                          country = {place.country}\n                          temp_celsius = {place.temp_celsius}\n                          temp_max = {place.temp_max}\n                          temp_min = {place.temp_min}\n                          description = {place.description}\n                          weatherIcon = {place.icon}/>\n                        </a>\n                    ))}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}